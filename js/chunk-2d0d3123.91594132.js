(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0d3123"],{"5acd":function(s,a,n){"use strict";n.r(a),a["default"]='<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo-restore&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学习 Canvas: 绘制矩形<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>在 Canvas 中，我们绘制矩形的方式有很多种<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>线段绘制法：<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我们可以通过四条线段，通过对边平行的原理来成为一个矩形。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span>\n      <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;400&quot;</span>\n      <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;400&quot;</span>\n      <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;rectUsingLines&quot;</span>\n      @<span class="hljs-attr">mousedown</span>=<span class="hljs-string">&quot;mousedownHandler&quot;</span>\n      @<span class="hljs-attr">mousemove</span>=<span class="hljs-string">&quot;mousemoveHandler&quot;</span>\n      @<span class="hljs-attr">mouseup</span>=<span class="hljs-string">&quot;mouseupHandler&quot;</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>使用 Canvas 提供的 API：<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>由于矩形是非常基础的几何图形，Canvas 提供了下列几个 API，供我们绘制矩形<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>ctx.fillRect(x, y, width, height)<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>\n        绘制一个填充的矩形\n      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>ctx.strokeRect(x, y, width, height)<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>\n        绘制一个矩形的边框\n      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>ctx.clearRect(x, y, width, height)<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>\n        绘制一个透明填充的矩形，通常该 API 是用来做橡皮擦功能\n      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>ctx.rect(x, y, width, height)<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>\n        这是一个通用的矩形方法，它配合\n        <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>ctx.fill()<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>效果等于\n        <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>ctx.fillRect<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>，如果配合\n        <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>ctx.stroke()<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>，就等于\n        <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>ctx.strokeRect<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>。\n      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>填充的矩形：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span>\n      <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;400&quot;</span>\n      <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;400&quot;</span>\n      <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;rectUsingFillRect&quot;</span>\n      @<span class="hljs-attr">mousedown</span>=<span class="hljs-string">&quot;mousedownHandler&quot;</span>\n      @<span class="hljs-attr">mousemove</span>=<span class="hljs-string">&quot;mousemoveHandler&quot;</span>\n      @<span class="hljs-attr">mouseup</span>=<span class="hljs-string">&quot;mouseupHandler&quot;</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>边框的矩形：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span>\n      <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;400&quot;</span>\n      <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;400&quot;</span>\n      <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;rectUsingStrokeRect&quot;</span>\n      @<span class="hljs-attr">mousedown</span>=<span class="hljs-string">&quot;mousedownHandler&quot;</span>\n      @<span class="hljs-attr">mousemove</span>=<span class="hljs-string">&quot;mousemoveHandler&quot;</span>\n      @<span class="hljs-attr">mouseup</span>=<span class="hljs-string">&quot;mouseupHandler&quot;</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>rect()<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>组合的方式\n    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span>\n      <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;400&quot;</span>\n      <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;700&quot;</span>\n      <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;rectUsingRectAPI&quot;</span>\n      @<span class="hljs-attr">mousedown</span>=<span class="hljs-string">&quot;mousedownHandler&quot;</span>\n      @<span class="hljs-attr">mousemove</span>=<span class="hljs-string">&quot;mousemoveHandler&quot;</span>\n      @<span class="hljs-attr">mouseup</span>=<span class="hljs-string">&quot;mouseupHandler&quot;</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript">\n<span class="hljs-comment">/* eslint-disable no-param-reassign */</span>\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>({\n  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-attr">eraserEnabled</span>: <span class="hljs-literal">false</span>,\n    };\n  },\n  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">drawAllCanvas</span>();\n  },\n  <span class="hljs-attr">methods</span>: {\n    <span class="hljs-title function_">drawAllCanvas</span>(<span class="hljs-params"></span>) {\n      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">drawRectUsingLines</span>();\n      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">drawRectUsingFillRect</span>();\n      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">drawRectUsingStrokeRect</span>();\n      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">drawRectUsingRectAPI</span>();\n    },\n    <span class="hljs-comment">/** 线段绘制法： */</span>\n    <span class="hljs-title function_">drawRectUsingLines</span>(<span class="hljs-params"></span>) {\n      <span class="hljs-keyword">const</span> ctx = (<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">rectUsingLines</span> <span class="hljs-keyword">as</span> HTMLCanvasElement).<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);\n      <span class="hljs-keyword">if</span> (!ctx) {\n        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Context is not empty!&#x27;</span>);\n      }\n      ctx.<span class="hljs-title function_">beginPath</span>();\n      <span class="hljs-comment">// 起点</span>\n      ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);\n      ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">300</span>, <span class="hljs-number">100</span>);\n      ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">300</span>, <span class="hljs-number">300</span>);\n      ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">100</span>, <span class="hljs-number">300</span>);\n      <span class="hljs-comment">// 最终使用 closePath() 方法, 将路径末尾点与起点连接起来</span>\n      ctx.<span class="hljs-title function_">closePath</span>();\n      ctx.<span class="hljs-title function_">stroke</span>();\n    },\n\n    <span class="hljs-title function_">drawRectUsingFillRect</span>(<span class="hljs-params"></span>) {\n      <span class="hljs-keyword">const</span> ctx = (<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">rectUsingFillRect</span> <span class="hljs-keyword">as</span> HTMLCanvasElement).<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);\n      <span class="hljs-keyword">if</span> (!ctx) {\n        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Context is not empty!&#x27;</span>);\n      }\n      ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;#9f9&#x27;</span>;\n      <span class="hljs-comment">// ctx.beginPath();</span>\n      ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);\n    },\n\n    <span class="hljs-title function_">drawRectUsingStrokeRect</span>(<span class="hljs-params"></span>) {\n      <span class="hljs-keyword">const</span> ctx = (<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">rectUsingStrokeRect</span> <span class="hljs-keyword">as</span> HTMLCanvasElement).<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);\n      <span class="hljs-keyword">if</span> (!ctx) {\n        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Context is not empty!&#x27;</span>);\n      }\n      ctx.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&#x27;#f00&#x27;</span>;\n      ctx.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">5</span>;\n      ctx.<span class="hljs-title function_">beginPath</span>();\n      ctx.<span class="hljs-title function_">strokeRect</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);\n    },\n\n    <span class="hljs-title function_">drawRectUsingRectAPI</span>(<span class="hljs-params"></span>) {\n      <span class="hljs-keyword">const</span> ctx = (<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">rectUsingRectAPI</span> <span class="hljs-keyword">as</span> HTMLCanvasElement).<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);\n      <span class="hljs-keyword">if</span> (!ctx) {\n        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Context is not empty!&#x27;</span>);\n      }\n      ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;#9f9&#x27;</span>;\n      ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);\n      ctx.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&#x27;#f00&#x27;</span>;\n      ctx.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">5</span>;\n      ctx.<span class="hljs-title function_">strokeRect</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);\n\n      ctx.<span class="hljs-title function_">rect</span>(<span class="hljs-number">100</span>, <span class="hljs-number">400</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);\n      ctx.<span class="hljs-title function_">fill</span>();\n      ctx.<span class="hljs-title function_">stroke</span>();\n    },\n\n    <span class="hljs-comment">/** 每个画布都可以擦除 */</span>\n    <span class="hljs-title function_">clearRectAsEraser</span>(<span class="hljs-params">evt: MouseEvent</span>) {\n      <span class="hljs-keyword">const</span> canvas = (evt.<span class="hljs-property">currentTarget</span> <span class="hljs-keyword">as</span> HTMLCanvasElement);\n      <span class="hljs-keyword">const</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);\n      <span class="hljs-keyword">if</span> (!ctx) {\n        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Context is not empty!&#x27;</span>);\n      }\n      ctx.<span class="hljs-title function_">clearRect</span>(evt.<span class="hljs-property">offsetX</span> - <span class="hljs-number">5</span>, evt.<span class="hljs-property">offsetY</span> - <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>);\n    },\n\n    <span class="hljs-title function_">mousedownHandler</span>(<span class="hljs-params">evt: MouseEvent</span>) {\n      <span class="hljs-variable language_">this</span>.<span class="hljs-property">eraserEnabled</span> = <span class="hljs-literal">true</span>;\n    },\n\n    <span class="hljs-title function_">mousemoveHandler</span>(<span class="hljs-params">evt: MouseEvent</span>) {\n      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">eraserEnabled</span>) {\n        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">clearRectAsEraser</span>(evt);\n      }\n    },\n\n    <span class="hljs-title function_">mouseupHandler</span>(<span class="hljs-params">evt: MouseEvent</span>) {\n      <span class="hljs-variable language_">this</span>.<span class="hljs-property">eraserEnabled</span> = <span class="hljs-literal">false</span>;\n    },\n  },\n});\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n'}}]);
//# sourceMappingURL=chunk-2d0d3123.91594132.js.map